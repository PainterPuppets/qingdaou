{
  "language_config": {
    "run": {
      "env": [
        "LANG=en_US.UTF-8",
        "LANGUAGE=en_US:en",
        "LC_ALL=en_US.UTF-8"
      ],
      "command": "/bin/usr/node /hardhat/judge.js {exe_path}",
      "seccomp_rule": "general",
      "exe_name": "unknown.js"
    }
  },
  "src": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}",
  "max_cpu_time": 1000,
  "max_memory": 134217728,
  "test_case": [{"input": "test", "output": "test"}],
  "output": false,
  "spj_version": "9df0cae202fd3888d6bf26b7f9087198",
  "spj_config": {
    "command": "{exe_path} {in_file_path} {user_out_file_path}",
    "exe_name": "spj-{spj_version}",
    "seccomp_rule": "c_cpp",
    "run_args": "const { time, loadFixture } = require(\"@nomicfoundation/hardhat-network-helpers\");\nconst { expect } = require(\"chai\");\ndescribe(\"Lock\", function () {\n  async function deployOneYearLockFixture() {\n    const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;\n    const ONE_GWEI = 1_000_000_000;\n    const lockedAmount = ONE_GWEI;\n    const unlockTime = (await time.latest()) + ONE_YEAR_IN_SECS;\n    const [owner, otherAccount] = await ethers.getSigners();\n    const Lock = await ethers.getContractFactory(\"Lock\");\n    const lock = await Lock.deploy(unlockTime, { value: lockedAmount });\n    return { lock, unlockTime, lockedAmount, owner, otherAccount };\n  }\n  describe(\"Deployment\", function () {\n    it(\"Should set the right unlockTime\", async function () {\n      const { lock, unlockTime } = await loadFixture(deployOneYearLockFixture);\n\n      expect(await lock.unlockTime()).to.equal(unlockTime);\n    });\n  });\n});"
  },
  "spj_compile_config": {
    "exe_name": "spj-{spj_version}",
    "src_name": "spj-{spj_version}.c",
    "max_memory": 1073741824,
    "max_cpu_time": 3000,
    "max_real_time": 10000,
    "compile_command": "/usr/bin/gcc -DONLINE_JUDGE -O2 -w -fmax-errors=3 -std=c11 {src_path} -lm -o {exe_path}"
  },
  "spj_src": "#include <stdio.h>\nint main(int argc, char *args[]){FILE *user_output = NULL;int result;if(argc != 3){return -1;}user_output = fopen(args[2], \"r\");return user_output;}",
  "io_mode": {
    "input": "input.txt",
    "output": "output.txt",
    "io_mode": "Standard IO"
  }
}