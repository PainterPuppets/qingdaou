{
  "headers": {
    "X-Judge-Server-Token": "b824cecedb22b06c3883b1f1dd9dd3150608fc24f8d0c16b0f85af8c8c761667"
  },
  "json": {
    "language_config": {
      "run": {
        "env": [
          "LANG=en_US.UTF-8",
          "LANGUAGE=en_US:en",
          "LC_ALL=en_US.UTF-8"
        ],
        "command": "/usr/bin/node {exe_path}",
        "seccomp_rule": "node",
        "memory_limit_check_only": 1
      },
      "compile": {
        "env": [
          "LANG=en_US.UTF-8",
          "LANGUAGE=en_US:en",
          "LC_ALL=en_US.UTF-8"
        ],
        "exe_name": "main.js",
        "src_name": "main.js",
        "max_memory": 1073741824,
        "max_cpu_time": 3000,
        "max_real_time": 5000,
        "compile_command": "/usr/bin/node --check {src_path}"
      },
      "template": "//PREPEND BEGIN\n//PREPEND END\n\n//TEMPLATE BEGIN\n//TEMPLATE END\n\n//APPEND BEGIN\n//APPEND END"
    },
    "src": "const readline = require(\"readline\");\nconst rl = readline.createInterface({ input: process.stdin });\nrl.on(\"line\", (input) => {\n  if (input === \"\") {\n    return rl.close();\n  }\n  const [a, b] = input.split(\"\").map(Number)\n  console.log(a + b);\n})",
    "max_cpu_time": 1000,
    "max_memory": 134217728,
    "test_case_id": "a3dcf9fd7c322bdc194174a8e16383ec",
    "output": false,
    "spj_version": "9df0cae202fd3888d6bf26b7f9087185",
    "spj_config": {
      "command": "{exe_path} {in_file_path} {user_out_file_path}",
      "exe_name": "spj-{spj_version}",
      "seccomp_rule": "c_cpp"
    },
    "spj_compile_config": {
      "exe_name": "spj-{spj_version}",
      "src_name": "spj-{spj_version}.c",
      "max_memory": 1073741824,
      "max_cpu_time": 3000,
      "max_real_time": 10000,
      "compile_command": "/usr/bin/gcc -DONLINE_JUDGE -O2 -w -fmax-errors=3 -std=c11 {src_path} -lm -o {exe_path}"
    },
    "spj_src": "#include <stdio.h>\n\n#define AC 0\n#define WA 1\n#define ERROR -1\n\nint spj(FILE *input, FILE *user_output);\n\nvoid close_file(FILE *f){\n    if(f != NULL){\n        fclose(f);\n}\n}\n\nint main(int argc, char *args[]){\n    FILE *input = NULL, *user_output = NULL;\n    int result;\n    if(argc != 3){\n        printf(\"Usage: spj x.in x.out\\n\");\n        return ERROR;\n    }\n    input = fopen(args[1], \"r\");\n    user_output = fopen(args[2], \"r\");\n    if(input == NULL || user_output == NULL){\n        printf(\"Failed to open output file\\n\");\n        close_file(input);\n        close_file(user_output);\n        return ERROR;\n    }\n\n    result = spj(input, user_output);\n    printf(\"result: %d\\n\", result);\n    \n    close_file(input);\n    close_file(user_output);\n    return result;\n}\n\nint spj(FILE *input, FILE *user_output){\n    /*\n      parameter: \n        - input，标程输入的文件指针\n        - user_output，用户输出文件的指针\n      return: \n        - 如果用户答案正确，返回 AC\n        - 如果用户答案错误返回  WA\n        - 如果主动捕获到自己的错误，如内存分配失败，返回 ERROR\n     */\n    int a, b;\n  \tint num;\n    fscanf(user_output,\"%d\", &num);\n    while(fscanf(input, \"%d %d\", &a, &b) != EOF){\n        if(a + b != num){\n            return WA;\n        }\n    }\n\treturn AC;\n}",
    "io_mode": {
      "input": "input.txt",
      "output": "output.txt",
      "io_mode": "Standard IO"
    }
  },
  "json2": {
    "language_config": {
      "run": {
        "env": [
          "LANG=en_US.UTF-8",
          "LANGUAGE=en_US:en",
          "LC_ALL=en_US.UTF-8"
        ],
        "command": "/usr/bin/node {exe_path}",
        "seccomp_rule": "node",
        "memory_limit_check_only": 1
      },
      "compile": {
        "env": [
          "LANG=en_US.UTF-8",
          "LANGUAGE=en_US:en",
          "LC_ALL=en_US.UTF-8"
        ],
        "exe_name": "main.js",
        "src_name": "main.js",
        "max_memory": 1073741824,
        "max_cpu_time": 3000,
        "max_real_time": 5000,
        "compile_command": "/usr/bin/node --check {src_path}"
      },
      "template": " //PREPEND BEGIN\n//PREPEND END\n\n//TEMPLATE BEGIN\n//TEMPLATE END\n\n//APPEND BEGIN\n//APPEND END"
    },
    "src": "const readline = require('readline');\nconst rl = readline.createInterface({ input: process.stdin });\nrl.on('line', (input) => {\n  if (input === '') {\n    return rl.close();\n  }\n  const [a, b] = input.split('').map(Number)\n  console.log(a + b);\n})",
    "max_cpu_time": 1000,
    "max_memory": 134217728,
    "test_case_id": "a3dcf9fd7c322bdc194174a8e16383ec",
    "output": false,
    "spj_version": "9df0cae202fd3888d6bf26b7f9087185",
    "spj_config": {
      "command": "{exe_path} {in_file_path} {user_out_file_path}",
      "exe_name": "spj-{spj_version}",
      "seccomp_rule": "c_cpp"
    },
    "spj_compile_config": {
      "exe_name": "spj-{spj_version}",
      "src_name": "spj-{spj_version}.c",
      "max_memory": 1073741824,
      "max_cpu_time": 3000,
      "max_real_time": 10000,
      "compile_command": "/usr/bin/gcc -DONLINE_JUDGE -O2 -w -fmax-errors=3 -std=c11 {src_path} -lm -o {exe_path}"
    },
    "spj_src": "#include <stdio.h>\n\n#define AC 0\n#define WA 1\n#define ERROR -1\n\nint spj(FILE *input, FILE *user_output);\n\nvoid close_file(FILE *f){\n    if(f != NULL){\n        fclose(f);\n    }\n}\n\nint main(int argc, char *args[]){\n    FILE *input = NULL, *user_output = NULL;\n    int result;\n    if(argc != 3){\n        printf('Usage: spj x.in x.out\\n');\n        return ERROR;\n    }\n    input = fopen(args[1], 'r');\n    user_output = fopen(args[2], 'r');\n    if(input == NULL || user_output == NULL){\n        printf('Failed to open output file\\n');\n        close_file(input);\n        close_file(user_output);\n        return ERROR;\n    }\n\n    result = spj(input, user_output);\n    printf('result: %d\\n', result);\n    \n    close_file(input);\n    close_file(user_output);\n    return result;\n}\n\nint spj(FILE *input, FILE *user_output){\n    /*\n      parameter: \n        - input，标程输入的文件指针\n        - user_output，用户输出文件的指针\n      return: \n        - 如果用户答案正确，返回 AC\n        - 如果用户答案错误返回  WA\n        - 如果主动捕获到自己的错误，如内存分配失败，返回 ERROR\n     */\n    int a, b;\n  \tint num;\n    fscanf(user_output,'%d', &num);\n    while(fscanf(input, '%d %d', &a, &b) != EOF){\n        if(a + b != num){\n            return WA;\n        }\n    }\n\treturn AC;\n}",
    "io_mode": {
      "input": "input.txt",
      "output": "output.txt",
      "io_mode": "Standard IO"
    }
  }
}